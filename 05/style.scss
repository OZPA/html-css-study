/*
①import機能

Sassでは @import "base.scss"; のように、他のscssファイルをインポートすることができます。header.scss, main.scss のようにわけることでコードの見通しが良くなるといった利点があります。
なお、 "_base.scss" と、アンダーバーを先頭につけることで、そのファイル自体はコンパイルされず（cssが作成されない）、インポート用のみのscssファイルを作成することもできます。

早速 @import "base" の下に、button.scss をインポートしてみてください。
*/

@import "base";
@import "button";

/*
② 変数を使える

Sassでは $hoge: bar; のように、何度も使用する数値を変数にすることができます。
例えば、サイトのメインカラーを $main_color: red; などと定義しておくことで、同じ色を使用する際にいちいちと記述しなくて済むようになります。
また、メインカラーに変更があった際には $main_color: blue; と変数を修正すれば、同じ色を使用している箇所を一気に修正することができます。
変数は下記のように使用します。

---
$site_width: 1000px;
$text_color: #1a1a1a;

.main {
  width: $site_width;
  color: $text_color;
}
---

下記に変数を用意したので、使ってみましょう。
・.content の背景色に $bg_colorを、widthに $content_width を、paddingに $inner_padding を設定してください
・.inner の背景色に $inner_bg_color を、paddingに $inner_padding を設定してください。
*/

$bg_color: #009eff;
$inner_bg_color: #a0c6da;
$content_width: 100%;
$inner_padding: 2em;

.content {
  background-color: $bg_color;
  width: $content_width;
  padding: $inner_padding;
}

.inner {
  background-color: $inner_bg_color;
  padding: $inner_padding;
}


/*
③ ネストを使ってみよう

Sassではcssでできなかったネスト（入れ子）を使用することができます。

例：Sassで以下のように記述しコンパイルすると
.foo {
  aaa

  .bar {
    bbb

    .baz{
      ccc
    }
  }
}

↓ cssでは以下のように変換されます
.foo {
  aaa
}
.foo .bar {
  bbb
}
.foo .bar .baz {
  ccc
}

ネストを上手く活用するとコードの記述量が減る＋見通しが良くなります。ただし、あまりネストしすぎると逆に可読性が低くなるので、入れ子構造は3,4階層くらいまでにしましょう。

では、実際に下記のcssをネストを利用してscssに直して見てください。
---
.num-list {
  padding: 10px;
}

.num-list li{
  list-style: none;
}

.num-list li strong {
  color: red;
}
---
*/
.num-list {
  padding: 10px;
  li {
    list-style: none;
    strong {
      color: red;
    }
  }
}

/*
④ アンパサンド（&）を使ってみよう
ネストとともに覚えたいのが &（アンパサンド）を利用した記述方法です。アンパサンドは「親セレクタを参照」できる機能です。

例
// css
a {
  color: green;
}
a:hover {
  color: blue;
}

↑のcssをscssで記述すると下記のようになります

// scss
a {
  color: green;

  &:hover {
    color: blue;
  }
}

また、下記のようにclass名を継承することも出来ます。
// css
.button {
  color: green;
}

.button--danger {
  color: red;
}

// scss
.button {
  color: green;

  &--danger {
    color: red;
  }
}

_button.scssでもアンパサンドを利用している記述があるので覗いてみてください。

---

では、&を利用して下記のcssをscssに修正してください。

// css
.list {
  list-style: none;
  padding-left: 1.2em;
}

.list li:before {
  content: "✓";
  padding-right: 10px;
}

*/
.list {
  list-style: none;
  padding-left: 1.2em;
  &:before {
    content: "✓";
    padding-right: 10px;
  }
}


/*
⑤ @mixinと@includeを使ってみよう

@mixinは一度定義したスタイルを@includeという形で呼び出す機能です。（@extendっていうのもあるけど多機能で柔軟性に富む@mixinを利用するで良いかと。@extend気になる方は https://chot.design/sass/21f5514c9ad3/ ）

【使い方】
// scss
@mixin block {
  display: flex;
  width: 25%;
}

.block {
  @include block;
}

// css
.block {
  display: flex;
  width: 25%;
}

あらかじめ@mixinでよく使うスタイルなどを定義しておき、@includeで呼び出すという形です。
メディアクエリを登録しておけばレスポンシブに簡単に対応できるので、scssを使いこなすなら必須の機能と言えます。
cf, https://qiita.com/2x2no/items/3ea1c16781321723a254

ここでは割愛しますが、@mixinでは引数が指定できたり便利な使い方がたくさんあるので興味ある方は調べてみましょう。

---

では、@mixin box を
```
  width: 600px;
  height: 200px;
  padding: 15px;
  border: 5px solid blue;
```
のように定義して、 .box に@include してみましょう。

*/
@mixin box {
  width: 600px;
  height: 200px;
  padding: 15px;
  border: 5px solid blue;
}

.box {
  @include box;
}


/*
⑥ おさらい

ではここまでのおさらいとして、下記の要件でscssを書いてみましょう！

---
・変数 $card-width を用意、23%に設定
・変数 $card-bg-color を用意、yellowに設定
・.card が1列に横並びでレイアウト上のwidthとbg-colorを設定、marginを上下左右に1%設定
・.card__inner にpadding上下左右10px設定
・.card__inner p の文字色を red に設定
---

*/

$card-width: 23%;
$card-bg-color: yellow;

.container {
  display: flex;
}

.card {
  width: $card-width;
  background-color: $card-bg-color;
  margin: 1%;
  &__inner {
    padding: 10px;
    p {
      color: red;
    }
  }
}
