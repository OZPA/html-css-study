/*
①import機能

Sassでは @import "hoge.scss"; のように、他のscssファイルをインポートすることができます。header.scss, main.scss のようにわけることでコードの見通しが良くなるといった利点があります。
なお、 "_hoge.scss" と、アンダーバーを先頭につけることで、そのファイル自体はコンパイルされず（cssが作成されない）、インポート用のみのscssファイルを作成することもできます。

早速 @import "base" の下に、button.scss をインポートしてみてください。
*/

@import "base";


/*
② 変数を使える

Sassでは $hoge: bar; のように、何度も使用する数値を変数にすることができます。
例えば、サイトのメインカラーを $main_color: red; などと定義しておくことで、同じ色を使用する際にいちいちと記述しなくて済むようになります。また、メインカラーに変更があった際には $main_color: blue; と変数を修正すれば、同じ色を使用している箇所を一気に修正することができます。
変数は下記のように使用します。

$site_width: 1000px;
$text_color: #1a1a1a;

.main {
  width: $site_width;
  color: $text_color;
}

変数を用意したので、使ってみましょう。
・.content の背景色に $bg_colorを、widthに $content_width を、paddingに $inner_padding を設定してください
・.inner の背景色に $inner_bg_color を、paddingに $inner_padding を設定してください。
*/

$content_bg_color: #00a8ff;
$content_width: 60em;
$inner_bg_color: #aacddf;
$inner_padding: 20px;

.content {
  margin: auto;
}

.inner {
}


/*
③ ネストを使ってみよう

Sassではcssでできなかったネスト（入れ子）を使用することができます。

例：Sassで以下のように記述しコンパイルすると
.foo {
  aaa

  .bar {
    bbb

    .baz{
      ccc
    }
  }
}

↓ cssでは以下のように変換されます
.foo {
  aaa
}
.foo .bar {
  bbb
}
.foo .bar .baz {
  ccc
}

ネストを上手く活用するとコードの記述量が減る＋見通しが良くなります。ただし、あまりネストしすぎると逆に可読性が低くなるので、入れ子構造は3階層くらいまでにしましょう。

では、実際に下記のcssをネストを利用してscssに直して見てください。
*/


/*
④ アンパサンド（&）を使ってみよう
*/


/*
⑤ 四則演算もできるぞい
*/